/**
 * Example 4: NLP Coreference problem.
 *
 * Sentence being parsed:
 * "Obama has told the senator that his constituency would not support the measure." 
 *
 * Given the knowledge below, obama is picked for query referenceOf(w7) 
 * because of gender information.
 *
 * However, if we add further knowledge:
 *
 * if isSenator(Entity) then canHave(Entity, constituency) 0.95;
 * if isPresident(Entity) then canHave(Entity, constituency) 0.05;
 * if possessive(Word) and dependency(AnotherWord, Word) then canHave(entityOf(referenceOf(Word)), AnotherWord);
 *
 * then the reference to obama should be made highly unlikely due to the
 * fact that the president cannot have a constituency, and the reference
 * should go to e2.
 *
 * In fact, if we then query the gender of the senator, we should get a
 * higher probability of their being male because of the reference. 
 */

//
// SORT DECLARATIONS:
sort Object: 100; // What is a good # here?

//
// RANDOM VARIABLE DECLARATIONS:
random canHave: Object x Object -> Boolean;
random dependency: Object x Object -> Boolean;
random isPresident: Object -> Boolean;
random isSenator: Object -> Boolean;
random noun: Object -> Boolean;
random possessive: Object -> Boolean;

// TODO: Should be auto-generated 
// (i.e. functions mapped to relations or if already declared redefined with additional parameter)
random gender: Object x Object -> Boolean;
random mention: Object x Object -> Boolean;
//
random entityOf: Object x Object -> Boolean;
random mentionOf: Object x Object -> Boolean;
random referenceOf: Object x Object -> Boolean;
random wordOf: Object x Object -> Boolean;


// TODO: Should be auto-generated (i.e. special random variables for quantified formulas).
random 'there exists Y : gender(X0, Y)': Object -> Boolean;
random 'there exists Y : mention(X0, Y)': Object -> Boolean;
random 'there exists Y : entityOf(X0, Y)': Object -> Boolean;
random 'there exists Y : mentionOf(X0, Y)': Object -> Boolean;
random 'there exists Y : referenceOf(X0, Y)': Object -> Boolean;
random 'there exists Y : wordOf(X0, Y)': Object -> Boolean;

//
// RULES:

//
// Background knowledge:

// Linguistic background knowledge: 
gender(his) = male; 

// Facts background knowledge:
gender(obama) = male;
isPresident(obama); 

// Linguistic generic background knowledge:
if entityOf(mentionOf(Word)) = Entity then entityOf(Word) = Entity;
if possessive(Possessive) and noun(AnotherWord) and gender(Possessive) = gender(entityOf(AnotherWord)) then referenceOf(Possessive) = entityOf(AnotherWord) 0.7; 

// Further knowledge:
if isSenator(Entity) then canHave(Entity, constituency) 0.95;
if isPresident(Entity) then canHave(Entity, constituency) 0.05;
if possessive(Word) and dependency(AnotherWord, Word) then canHave(entityOf(referenceOf(Word)), AnotherWord);
 
//
// Evidence coming from lower-level NLP system:
mention(w1) = m1;
entityOf(m1) = obama;
mention(w5) = m2;
entityOf(m2) = e2;
isSenator(e2);
possessive(w7);
wordOf(w7) = his;
dependency(w8, w7);
noun(obama);
noun(senator);
