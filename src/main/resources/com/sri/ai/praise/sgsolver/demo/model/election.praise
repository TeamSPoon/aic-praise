@LANG:HOGMv1
@MODEL:name=[Page 1]parts=[page-1]queries=[query-page-1#1]
@FRAGMENT:page-1
random terrorAttacks : 0..20;
random newJobs : 0..100000; // 100K
random dow: 11000..18000;
random economyIsPoor : Boolean;
random economyIsGreat : Boolean;
random attackPerception: Boolean;
random likeIncumbent  : 0..100000000; // 100M
random likeChallenger : 0..100000000; // 100M

// P(terrorAttacks) =
if terrorAttacks = 0 then 1/21 else 1/21; // uniform
// Note: ideally, the above uniform distribution should be simply represented by the constant 1/21;
// Due to a bug, we do not recognize numeric-constant rules at this point,
// hence the artificial distinction used above on terrorAttacks = 0.
// It is artificial because the probability is the same for every value of terrorAttacks.

// P(newJobs) =
if newJobs = 0 then 1/(100000 + 1) else 1/(100000 + 1); // uniform
// see comment for P(terrorAttacks) regarding uniform distributions

// P(dow) =
if dow = 0 then 1/(18000 - 11000 + 1) else 1/(18000 - 11000 + 1); // uniform
// see comment for P(terrorAttacks) regarding uniform distributions

economyIsPoor <=> dow < 13000 or newJobs < 30000;

economyIsGreat <=> dow > 16000 or newJobs > 70000;

attackPerception <=> terrorAttacks > 4;

// P(likeIncumbent) = 
if economyIsGreat
   then if likeIncumbent > 700000 then 0.9/(100000000 + 1) else 0.1/(100000000 + 1)
else
if economyIsPoor
   then if likeIncumbent < 50000000 then 0.8/(100000000 + 1) else 0.2/(100000000 + 1)
   else if terrorAttacks > 4
        then if likeIncumbent < 60000000 then 0.9/(100000000 + 1) else 0.1/(100000000 + 1)
        else if likeIncumbent = 0  then 1/(100000000 + 1) else 1/(100000000 + 1); // uniform // see comment for P(terrorAttacks) regarding uniform distributions

// P(likeChallenger) =
if likeChallenger = 0 then 1/(100000000 + 1) else 1/(100000000 + 1);
// see comment for P(terrorAttacks) regarding uniform distributions

// Evidence:

terrorAttacks = 7;
dow = 12000;

@FRAGMENT:query-page-1#1
likeIncumbent > likeChallenger
