/* The following code was generated by JFlex 1.4.3 on 3/15/13 11:21 PM */

/*
 * RuleTokenMaker.java - Token maker for the PRAISE rule language.
 * 
 * To generate this file, run:
 *     jflex /src/main/resources/com/sri/ai/praise/rules/rsyntaxtextarea/RuleTokenMaker.flex
 * 
 * Then delete the generated versions of yyreset(Reader) and zzRefill() so
 * that we use the versions defined in this file.  This will eliminate 
 * memory allocations.
 */
package com.sri.ai.praise.rules.rsyntaxtextarea;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMaker;
import org.fife.ui.rsyntaxtextarea.TokenTypes;


/**
 * Scanner for the PRAISE rule language.
 */

public class RuleTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 8;
  public static final int YYINITIAL = 0;
  public static final int MLC = 6;
  public static final int LONG_STRING_2 = 4;
  public static final int LONG_STRING_1 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\7\1\0\1\24\1\22\22\0\1\24\1\57\1\6"+
    "\1\23\1\30\1\32\1\27\1\5\1\55\1\55\1\26\1\31\1\55"+
    "\1\20\1\15\1\25\1\10\7\13\2\3\1\42\1\32\1\63\1\60"+
    "\1\62\1\27\1\23\4\14\1\17\1\14\3\2\1\21\5\2\1\54"+
    "\7\2\1\12\2\2\1\27\1\4\1\27\1\61\1\1\1\0\1\44"+
    "\1\47\1\14\1\46\1\16\1\37\1\2\1\33\1\40\1\21\1\2"+
    "\1\41\1\52\1\45\1\50\1\35\1\2\1\51\1\36\1\34\1\2"+
    "\1\2\1\43\1\11\1\53\1\2\1\22\1\56\1\22\1\27\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\2\2\1\7\1\10\2\7\4\2\1\7\6\2\1\11"+
    "\1\12\2\1\2\13\1\14\2\15\1\16\1\17\1\20"+
    "\5\17\1\21\3\17\1\22\1\23\1\22\1\23\1\22"+
    "\1\3\1\22\2\2\1\24\1\25\10\2\1\0\1\26"+
    "\11\0\2\23\1\0\1\3\1\2\1\0\2\2\10\0"+
    "\1\23\1\2\1\27\1\2\2\0\1\30\2\0\1\31"+
    "\2\2\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
		result[j++] = value;
	} while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u0104\0\u0104\0\u0104\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270"+
    "\0\u02a4\0\u0104\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
    "\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0138\0\u0104\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u0104\0\u05e4\0\u0618\0\u0104\0\u064c"+
    "\0\u0104\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0104\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u0820\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u0104\0\u09c0\0\u09f4\0\u0a28\0\u0a5c"+
    "\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u023c\0\u0104\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0104\0\u0d68\0\u0d9c\0\u0924\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u0104\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u1144\0\u12b0\0\u11e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\2\7\1\10\1\7\1\15\1\16\1\7\1\17\1\7"+
    "\2\6\1\20\1\21\1\22\2\6\2\22\1\7\1\23"+
    "\1\7\1\24\1\25\1\26\1\7\1\27\1\7\1\30"+
    "\1\31\1\7\1\32\1\33\1\34\1\35\1\7\1\36"+
    "\2\37\1\40\1\17\1\22\1\6\1\41\4\42\1\43"+
    "\1\44\1\42\1\0\54\42\4\45\1\46\1\45\1\47"+
    "\1\0\54\45\7\50\1\51\16\50\1\52\4\50\1\53"+
    "\3\50\1\54\3\50\1\55\20\50\7\56\1\57\23\56"+
    "\1\60\3\56\1\61\3\56\1\62\20\56\65\0\3\7"+
    "\4\0\5\7\1\0\2\7\1\0\1\7\11\0\7\7"+
    "\1\0\12\7\7\0\3\63\1\10\1\63\3\0\1\10"+
    "\2\63\1\10\1\63\1\64\2\65\1\0\1\66\1\0"+
    "\1\63\4\0\1\63\2\0\7\63\1\0\12\63\7\0"+
    "\3\63\1\67\1\63\3\0\1\70\2\71\1\70\1\63"+
    "\1\64\2\65\1\0\1\66\1\0\1\63\4\0\1\63"+
    "\2\0\7\63\1\0\12\63\12\0\1\64\4\0\1\64"+
    "\2\0\1\64\51\0\3\7\4\0\1\7\1\72\3\7"+
    "\1\0\2\7\1\0\1\7\11\0\6\7\1\73\1\0"+
    "\12\7\71\0\1\22\25\0\1\20\64\0\1\74\1\75"+
    "\36\0\3\7\4\0\5\7\1\0\2\7\1\0\1\7"+
    "\11\0\1\76\6\7\1\0\12\7\10\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\0"+
    "\1\7\1\77\3\7\1\100\4\7\10\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\0"+
    "\5\7\1\33\4\7\10\0\3\7\4\0\5\7\1\0"+
    "\2\7\1\0\1\7\11\0\4\7\1\36\2\7\1\0"+
    "\12\7\27\0\1\22\44\0\3\7\4\0\5\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\36\2\7\1\101"+
    "\1\0\2\7\1\102\7\7\10\0\3\7\4\0\5\7"+
    "\1\0\2\7\1\0\1\7\11\0\7\7\1\0\5\7"+
    "\1\103\4\7\10\0\3\7\4\0\5\7\1\0\1\36"+
    "\1\7\1\0\1\7\11\0\7\7\1\0\12\7\10\0"+
    "\3\7\4\0\5\7\1\0\2\7\1\0\1\7\11\0"+
    "\7\7\1\0\6\7\1\36\3\7\10\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\0"+
    "\1\7\1\104\10\7\10\0\3\7\4\0\5\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\0\1\7\1\105"+
    "\10\7\67\0\1\22\63\0\1\106\3\0\4\42\1\43"+
    "\1\0\1\42\1\0\60\42\1\43\2\42\1\0\54\42"+
    "\4\45\1\46\1\45\2\0\60\45\1\46\2\45\1\0"+
    "\54\45\7\50\1\0\16\50\1\0\4\50\1\0\3\50"+
    "\1\0\3\50\1\0\20\50\25\0\1\107\72\0\1\110"+
    "\63\0\1\111\3\0\1\112\66\0\1\113\20\0\7\56"+
    "\1\0\23\56\1\0\3\56\1\0\3\56\1\0\20\56"+
    "\34\0\1\114\63\0\1\115\3\0\1\116\66\0\1\117"+
    "\20\0\5\63\3\0\5\63\1\0\2\63\1\0\1\63"+
    "\1\0\1\63\4\0\1\63\2\0\7\63\1\0\12\63"+
    "\12\0\1\64\4\0\1\64\2\0\1\64\2\0\2\120"+
    "\1\0\1\121\42\0\3\63\1\122\1\63\3\0\1\122"+
    "\2\63\1\122\1\63\1\0\2\63\1\123\1\63\1\0"+
    "\1\63\4\0\1\63\1\123\1\0\7\63\1\0\12\63"+
    "\7\0\3\63\1\67\1\63\3\0\1\67\2\63\1\67"+
    "\1\63\1\64\2\65\1\0\1\66\1\0\1\63\4\0"+
    "\1\63\2\0\7\63\1\0\12\63\7\0\3\63\1\67"+
    "\1\63\3\0\1\70\2\63\1\70\1\63\1\64\2\65"+
    "\1\0\1\66\1\0\1\63\4\0\1\63\2\0\7\63"+
    "\1\0\12\63\7\0\3\63\1\124\1\63\3\0\1\124"+
    "\2\63\2\124\1\0\2\124\1\0\1\63\1\0\1\63"+
    "\4\0\1\63\2\0\4\63\1\124\2\63\1\0\1\63"+
    "\1\124\1\63\2\124\5\63\10\0\3\7\4\0\5\7"+
    "\1\0\2\7\1\0\1\7\11\0\5\7\1\125\1\7"+
    "\1\0\12\7\10\0\3\7\4\0\5\7\1\0\2\7"+
    "\1\0\1\7\11\0\3\7\1\32\3\7\1\0\12\7"+
    "\35\0\1\126\36\0\3\7\4\0\5\7\1\0\1\127"+
    "\1\7\1\0\1\7\11\0\7\7\1\0\12\7\10\0"+
    "\3\7\4\0\5\7\1\0\2\7\1\0\1\7\11\0"+
    "\7\7\1\0\7\7\1\32\2\7\10\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\0"+
    "\6\7\1\103\3\7\10\0\3\7\4\0\5\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\36\1\0\12\7"+
    "\10\0\3\7\4\0\5\7\1\0\2\7\1\0\1\7"+
    "\11\0\7\7\1\0\3\7\1\36\6\7\10\0\3\7"+
    "\4\0\5\7\1\0\2\7\1\0\1\7\11\0\1\7"+
    "\1\36\5\7\1\0\12\7\10\0\3\7\4\0\5\7"+
    "\1\0\2\7\1\0\1\7\11\0\7\7\1\0\2\7"+
    "\1\130\7\7\10\0\3\7\4\0\5\7\1\0\2\7"+
    "\1\0\1\7\11\0\7\7\1\0\10\7\1\36\1\7"+
    "\43\0\1\131\64\0\1\132\67\0\1\133\65\0\1\134"+
    "\54\0\1\135\64\0\1\136\67\0\1\137\65\0\1\140"+
    "\23\0\1\141\4\0\1\141\2\0\1\141\4\0\1\123"+
    "\10\0\1\123\32\0\3\63\1\122\1\63\3\0\1\122"+
    "\2\63\1\122\1\63\1\0\2\63\1\0\1\66\1\0"+
    "\1\63\4\0\1\63\2\0\7\63\1\0\12\63\12\0"+
    "\1\141\4\0\1\141\2\0\1\141\51\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\3\7\1\142"+
    "\3\7\1\0\12\7\34\0\1\143\37\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\0"+
    "\2\7\1\36\3\7\1\32\3\7\10\0\3\7\4\0"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\0"+
    "\3\7\1\144\6\7\44\0\1\145\70\0\1\146\37\0"+
    "\1\132\62\0\1\147\103\0\1\150\70\0\1\151\37\0"+
    "\1\136\62\0\1\152\51\0\1\141\4\0\1\141\2\0"+
    "\1\141\5\0\1\121\43\0\3\7\4\0\5\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\153\5\7\1\0"+
    "\12\7\10\0\3\7\4\0\5\7\1\0\2\7\1\0"+
    "\1\7\11\0\7\7\1\0\5\7\1\154\4\7\45\0"+
    "\1\132\3\0\1\146\46\0\1\155\37\0\1\156\2\147"+
    "\1\0\1\156\2\0\5\147\1\156\2\147\1\156\1\147"+
    "\1\0\1\156\1\0\1\147\2\156\1\147\2\156\7\147"+
    "\1\156\12\147\1\156\1\0\2\156\41\0\1\136\3\0"+
    "\1\151\46\0\1\157\37\0\1\160\2\152\1\0\1\160"+
    "\2\0\5\152\1\160\2\152\1\160\1\152\1\0\1\160"+
    "\1\0\1\152\2\160\1\152\2\160\7\152\1\160\12\152"+
    "\1\160\1\0\2\160\4\0\3\7\4\0\5\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\36\3\7\1\0"+
    "\12\7\10\0\3\7\4\0\5\7\1\0\2\7\1\0"+
    "\1\7\11\0\7\7\1\0\7\7\1\36\2\7\34\0"+
    "\1\147\63\0\1\152\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4836];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do {
		result[j++] = value;
	} while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\3\11\6\1\1\11\14\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\11\5\1\1\11"+
    "\14\1\1\11\11\1\1\0\1\11\11\0\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\10\0\2\1\1\11\1\1"+
    "\2\0\1\1\2\0\3\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
		result[j++] = value;
	} while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public RuleTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {


		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = TokenTypes.NULL;
		switch (initialTokenType) {
			case TokenTypes.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case TokenTypes.LITERAL_STRING_DOUBLE_QUOTE:
				state = LONG_STRING_2;
				break;
			case TokenTypes.LITERAL_CHAR:
				state = LONG_STRING_1;
				break;
			default:
				state = TokenTypes.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		}
		catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/* Keep this version of the method. */
	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
//		zzAtBOL  = true;
		zzAtEOF  = false;
	}


	/* Keep this version of the method. */
	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RuleTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public RuleTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do {
		map[j++] = value;
	} while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null) {
		zzReader.close();
	}
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() ) {
		zzScanError(ZZ_PUSHBACK_2BIG);
	}

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
			zzInput = zzBufferL[zzCurrentPosL++];
		}
		else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) {
			break zzForAction;
		}
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) {
				break zzForAction;
			}
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { int temp=zzStartRead; addToken(start, zzStartRead-1, TokenTypes.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, TokenTypes.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 26: break;
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 11: 
          { addToken(TokenTypes.LITERAL_CHAR);
          }
        case 28: break;
        case 23: 
          { addToken(TokenTypes.COMMENT_MULTILINE);
          }
        case 29: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 30: break;
        case 8: 
          { addToken(TokenTypes.WHITESPACE);
          }
        case 31: break;
        case 19: 
          { addToken(TokenTypes.LITERAL_NUMBER_FLOAT);
          }
        case 32: break;
        case 9: 
          { addToken(TokenTypes.RESERVED_WORD);
          }
        case 33: break;
        case 10: 
          { addToken(TokenTypes.SEPARATOR);
          }
        case 34: break;
        case 4: 
          { yybegin(LONG_STRING_1); addToken(TokenTypes.LITERAL_CHAR);
          }
        case 35: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start, zzStartRead+1, TokenTypes.COMMENT_MULTILINE);
          }
        case 36: break;
        case 2: 
          { addToken(TokenTypes.IDENTIFIER);
          }
        case 37: break;
        case 17: 
          { addToken(start,zzStartRead-1, TokenTypes.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 38: break;
        case 16: 
          { addToken(start, zzStartRead-1, TokenTypes.COMMENT_MULTILINE); return firstToken;
          }
        case 39: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 40: break;
        case 1: 
          { addToken(TokenTypes.ERROR_IDENTIFIER);
          }
        case 41: break;
        case 13: 
          { addToken(TokenTypes.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 42: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, TokenTypes.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, TokenTypes.COMMENT_EOL); start = zzMarkedPos;
          }
        case 43: break;
        case 18: 
          { addToken(TokenTypes.ERROR_NUMBER_FORMAT);
          }
        case 44: break;
        case 3: 
          { addToken(TokenTypes.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 45: break;
        case 7: 
          { addToken(TokenTypes.OPERATOR);
          }
        case 46: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(TokenTypes.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 47: break;
        case 5: 
          { yybegin(LONG_STRING_2); addToken(TokenTypes.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 48: break;
        case 12: 
          { yybegin(YYINITIAL); addToken(TokenTypes.LITERAL_CHAR);
          }
        case 49: break;
        case 15: 
          { 
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, TokenTypes.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 113: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 114: break;
            case MLC: {
              addToken(start, zzStartRead-1, TokenTypes.COMMENT_MULTILINE); return firstToken;
            }
            case 115: break;
            case LONG_STRING_2: {
              if (firstToken==null) {
										addToken(TokenTypes.LITERAL_STRING_DOUBLE_QUOTE); 
									}
									return firstToken;
            }
            case 116: break;
            case LONG_STRING_1: {
              if (firstToken==null) {
										addToken(TokenTypes.LITERAL_CHAR); 
									}
									return firstToken;
            }
            case 117: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
